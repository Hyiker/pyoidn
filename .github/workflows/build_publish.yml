name: Build and Publish

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
            ext: zip
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            ext: tar.gz
          - os: macos-latest
            platform: macos
            arch: x86_64
            ext: tar.gz
          - os: macos-latest
            platform: macos
            arch: arm64
            ext: tar.gz

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        shell: bash

      - name: Download OIDN (Windows)
        if: matrix.platform == 'windows'
        run: |
          curl -L -o oidn.zip https://github.com/RenderKit/oidn/releases/download/v${{ env.VERSION }}/oidn-${{ env.VERSION }}.${{ matrix.arch }}.${{ matrix.platform }}.zip
          7z x oidn.zip
          mkdir -p pyoidn/oidn
          cp -r oidn-${{ env.VERSION }}.${{ matrix.arch }}.${{ matrix.platform }}/bin pyoidn/oidn/
          cp -r oidn-${{ env.VERSION }}.${{ matrix.arch }}.${{ matrix.platform }}/lib pyoidn/oidn/
        shell: bash

      - name: Download OIDN (Unix)
        if: matrix.platform != 'windows'
        run: |
          curl -L -o oidn.tar.gz https://github.com/RenderKit/oidn/releases/download/v${{ env.VERSION }}/oidn-${{ env.VERSION }}.${{ matrix.arch }}.${{ matrix.platform }}.tar.gz
          tar -xzf oidn.tar.gz
          mkdir -p pyoidn/oidn
          cp -r oidn-${{ env.VERSION }}.${{ matrix.arch }}.${{ matrix.platform }}/bin pyoidn/oidn/
          cp -r oidn-${{ env.VERSION }}.${{ matrix.arch }}.${{ matrix.platform }}/lib pyoidn/oidn/

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Install package for testing
        if: matrix.platform != 'macos'
        run: |
          pip install ./dist/*.whl
          pip install -r requirements-test.txt

      - name: Run tests
        if: matrix.platform != 'macos'
        run: |
          python tests/test.py
        continue-on-error: false

      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ env.VERSION }}-${{ matrix.arch }}-${{ matrix.platform }}
          path: dist/*.whl
          overwrite: true

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare distributions
        run: |
          mkdir final_dist
          find dist -name "*.whl" -exec cp {} final_dist/ \;

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload --skip-existing final_dist/*
